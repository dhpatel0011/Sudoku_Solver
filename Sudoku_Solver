import numpy as np

# n = [[5,3,0,0,7,0,0,0,0],
#         [6,0,0,1,9,5,0,0,0],
#         [0,9,8,0,0,0,0,6,0],
#         [8,0,0,0,6,0,0,0,3],
#         [4,0,0,8,0,3,0,0,1],
#         [7,0,0,0,2,0,0,0,6],
#         [0,6,0,0,0,0,2,8,0],
#         [0,0,0,0,1,9,0,0,5],
#         [0,0,0,0,0,0,0,0,0]]

n = np.zeros((1,9))
for i in range (9):
    a = np.array(list(map(int, str(input("Enter the row elements:")))))
    a=a  
    n = np.vstack((n,a))

n = np.delete(n, 0, 0)



def possible(row, column, number):
    global n
    #Is the number appearing in the given row?
    for i in range(0,9):
        if n[row][i] == number:
            return False

    #Is the number appearing in the given column?
    for i in range(0,9):
        if n[i][column] == number:
            return False
    
    #Is the number appearing in the given square?
    x0 = (column // 3) * 3
    y0 = (row // 3) * 3
    for i in range(0,3):
        for j in range(0,3):
            if n[y0+i][x0+j] == number:
                return False

    return True

def solve():
    global n
    for row in range(0,9):
        for column in range(0,9):
            if n[row][column] == 0:
                for number in range(1,10):
                    if possible(row, column, number):
                        n[row][column] = number
                        solve()
                        n[row][column] = 0

                return
      
    print()
    print(np.matrix(n))
    input('More possible solutions')

solve()